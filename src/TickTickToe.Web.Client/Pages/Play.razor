@page "/play"

@using Microsoft.AspNetCore.SignalR.Client
@using Blazored.SessionStorage
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json.Serialization

@attribute [Authorize]

@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider Authenticator
@inject NavigationManager Navigator
@inject IConfiguration Config
@inject ISessionStorageService SessionStorage
@inject ISnackbar Snackbar

<PageTitle>Play</PageTitle>

@if (_hubConnection?.State != HubConnectionState.Connected)
{
    <MudText Typo="Typo.h5" Class="pa-4 my-4">You are not connected to a server.</MudText>
    <MudText Typo="Typo.h6" Class="pa-4 mb-4">If this message persists, reload this page to establish a connection.</MudText>
}
else if (_gameId == Guid.Empty)
{
    <JoinUI OnJoin="JoinGame" OnCreate="CreateGame" />
}
else
{
    <MudText Typo="Typo.h5" Class="pa-4 my-4">Playing game @(_gameId.ToString()).</MudText>
    <MudText Typo="Typo.h5" Class="pa-4 my-4">I am @_userId.</MudText>
    <MudText Typo="Typo.h5" Class="pa-4 my-4">Playing X, we have @_playerOneId</MudText>
    
    @if (_playerTwoId is not null)
    {
        <MudText Typo="Typo.h5" Class="pa-4 my-4">Playing O is @_playerTwoId.</MudText>
    }
    else
    {
        <MudText Typo="Typo.h5" Class="pa-4 my-4">Waiting for player two...</MudText>
    }
}

@code
{
    private HubConnection? _hubConnection;
    private Guid _gameId;
    private string? _userId;
    private string? _playerOneId;    
    private string? _playerTwoId;

    private class Item
    {
        [JsonPropertyName("access_token")]
        public string? AccessToken { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
    // Get username from AuthenticationStateProvider
        var authState = await Authenticator.GetAuthenticationStateAsync();
        _userId = authState?.User.Identity?.Name;
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigator.ToAbsoluteUri("/gamehub"), options =>
            {
                options.AccessTokenProvider = async () =>
                {
                    // TODO: Don't hard-code this.
                    var key = "oidc.user:https://localhost:7067:TickTickToe.Web.Client";
                    var item = await SessionStorage.GetItemAsync<Item>(key);
                    return item.AccessToken;
                };
            })
            .Build();
        
        _hubConnection.On<Guid>("AddAsPlayerOne", gameId =>
        {
            this._playerOneId = _userId;
            this._gameId = gameId;
            StateHasChanged();
        });
        
        _hubConnection.On<string, Guid>("AddAsPlayerTwo", (playerOneId, gameId) =>
        {
            this._playerOneId = playerOneId;
            this._playerTwoId = _userId;
            this._gameId = gameId;
            StateHasChanged();
        });
        
        _hubConnection.On<string>("AddPlayerTwo", userId =>
        {
            this._playerTwoId = userId;
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }
    
    // async Task Send(string message)
    // {
    //     if (_hubConnection is not null && _game is not null)
    //     {
    //         await _hubConnection.SendAsync("SendChat", _game.InviteLink, message);
    //     }
    // }

    async Task CreateGame(string password)
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("CreateGame", password);
        }
    }

    async Task JoinGame((string InviteLink, string Password) game)
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("JoinGame", game.InviteLink, game.Password);
        }
    }

    // async Task LeaveGame()
    // {
    //     if (_hubConnection is not null && _game is not null)
    //     {
    //         await _hubConnection.SendAsync("LeaveGame", _game.InviteLink);
    //     }
    // }
    //
    // async Task StartGame()
    // {
    //     if (_hubConnection is not null && _game is not null)
    //     {
    //         await _hubConnection.SendAsync("StartGame", _game.InviteLink);
    //     }
    // }
    //
    // public async ValueTask DisposeAsync()
    // {
    //     if (_hubConnection != null) await _hubConnection.DisposeAsync();
    // }
}